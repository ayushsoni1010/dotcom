-- ft.page-with-toc: `MonitoredPullRequest Model`
toc: $config.development

-- ft.code:
lang: py

class MonitoredPullRequest(models.Model):
    class PullRequestStatus(models.TextChoices):
        """
        NOT_CONNECTED: Documentation PR Not connected
        APPROVAL_PENDING: PR Document is connected but the documentation is approved
        STALE_CODE: Documentation is connected but the Documentation has updated since the last commit
        STALE_APPROVAL: Approved in the past but the code has diverged since then
        APPROVED: Approved and the documentation is up to date
        """

        NOT_CONNECTED = "NOT_CONNECTED", "Not Connected"
        APPROVAL_PENDING = "APPROVAL_PENDING", "Approval Pending"
        STALE_CODE = "STALE_CODE", "Stale Code"
        STALE_APPROVAL = "STALE_APPROVAL", "Stale Approval"
        APPROVED = "APPROVED", "Approved"
        MANUAL_APPROVAL = "MANUALLY_APPROVED", "Manual Approval"

    code_pull_request = models.OneToOneField(
        GithubPullRequest,
        on_delete=models.CASCADE,
        related_name="monitored_code",
    )
    documentation_pull_request = models.ForeignKey(
        GithubPullRequest,
        on_delete=models.CASCADE,
        blank=True,
        null=True,
        related_name="monitored_documentation",
    )
    pull_request_status = models.CharField(
        max_length=20,
        choices=PullRequestStatus.choices,
        default=PullRequestStatus.NOT_CONNECTED,
    )
    integration = models.ForeignKey(GithubAppInstallation, on_delete=models.CASCADE)

    class Meta:
        unique_together = ("code_pull_request", "documentation_pull_request")

    def __str__(self) -> str:
        return f"{self.code_pull_request.repository.repo_full_name}[{self.code_pull_request.pr_number}]"

    def save(self, *args, **kwargs):
        if (
            self.documentation_pull_request is not None
            and self.pull_request_status
            == MonitoredPullRequest.PullRequestStatus.NOT_CONNECTED
        ):
            self.pull_request_status = (
                MonitoredPullRequest.PullRequestStatus.APPROVAL_PENDING
            )
        elif (
            self.documentation_pull_request is None
            and self.pull_request_status
            != MonitoredPullRequest.PullRequestStatus.MANUAL_APPROVAL
            # In case of a manual approval, the documentation PR is not connected
        ):
            self.pull_request_status = (
                MonitoredPullRequest.PullRequestStatus.NOT_CONNECTED
            )
        return super().save(*args, **kwargs)

    def get_display_name(self):
        return f"{self.code_pull_request.repository.repo_full_name}/#{self.code_pull_request.pr_number}: {self.code_pull_request.pr_title}"

    @property
    def is_approved(self):
        return self.pull_request_status in [
            MonitoredPullRequest.PullRequestStatus.APPROVED,
            MonitoredPullRequest.PullRequestStatus.MANUAL_APPROVAL,
        ]

    def get_latest_approval(self):
        try:
            return self.prapproval_set.latest("created_on")
        except:
            return None
